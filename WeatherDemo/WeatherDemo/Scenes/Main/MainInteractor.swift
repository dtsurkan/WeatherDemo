//
//  MainInteractor.swift
//  WeatherDemo
//
//  Created by Dima Tsurkan on 9/21/17.
//  Copyright (c) 2017 Dima Tsurkan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainBusinessLogic {
    func fetchCurrentWeather(request: Main.CurrentWeaher.Request)
    func fetchForecast(request: Main.Forecast.Request)
}

protocol MainDataStore {
    var weather: WeatherModel? { get }
    var forecast: ForecastModel? { get }
}

class MainInteractor: MainBusinessLogic, MainDataStore {
    var presenter: MainPresentationLogic?
    var worker: MainWorker?
    var weather: WeatherModel?
    var forecast: ForecastModel?
  
    // MARK: - Fetch Weather
  
    func fetchCurrentWeather(request: Main.CurrentWeaher.Request) {
        if worker == nil {
            worker = MainWorker()
        }
        worker?.fetchCurrentWeaher(lat: request.latitude, long: request.longitude, completionHandler: { [weak self] (weather, error) in
            if let weather = weather {
                self?.weather = weather
                let response = Main.CurrentWeaher.Response(weather: weather, errorDescription: nil)
                self?.presenter?.presentCurrentWeather(response: response)
            } else {
                let response = Main.CurrentWeaher.Response(weather: nil, errorDescription: error?.localizedDescription)
                self?.presenter?.presentError(response: response)
            }
        })
    }
    
    func fetchForecast(request: Main.Forecast.Request) {
        if worker == nil {
            worker = MainWorker()
        }
        
        worker?.fetchForecast(lat: request.latitude, long: request.longitude, completionHandler: { [weak self] (forecast, error) in
            if let forecast = forecast {
                self?.forecast = forecast
                let response = Main.Forecast.Response(forecast: forecast, errorDescription: nil)
                self?.presenter?.presentForecast(response: response)
            } else {
                let response = Main.CurrentWeaher.Response(weather: nil, errorDescription: error?.localizedDescription)
                self?.presenter?.presentError(response: response)
            }
        })
    }
}
