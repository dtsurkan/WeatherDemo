//
//  MainViewController.swift
//  WeatherDemo
//
//  Created by Dima Tsurkan on 9/21/17.
//  Copyright (c) 2017 Dima Tsurkan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import IGListKit
import CoreLocation

protocol MainDisplayLogic: class {
    func displayCurrentWeather(viewModel: Main.CurrentWeaher.ViewModel)
    func displayForecast(viewModel: Main.Forecast.ViewModel)
}

class MainViewController: UIViewController, MainDisplayLogic {
    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
    var displayedCurrentWeather: Main.CurrentWeaher.ViewModel.DisplayedWeather?
    var displayedForecast: [Main.Forecast.ViewModel.DisplayedForecast] = []
    
    lazy var adapter: ListAdapter = {
        return ListAdapter(updater: ListAdapterUpdater(), viewController: self)
    }()
    
    // MARK: - Outlets
    
    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var headerView: UIView!

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = MainInteractor()
        let presenter = MainPresenter()
        let router = MainRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        configureView()
        LocationService.shared.delegate = self
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
    }
    
    // MARK: - Internal
    
    private func configureView() {
        configureCollectionView()
    }
    
    private func configureCollectionView() {
        adapter.collectionView = collectionView
        adapter.dataSource = self
    }
  
    private func updateCurrentWeather() {
        navigationItem.title = displayedCurrentWeather?.weather.name
    }
    
    
    // MARK: - Actions
    
    @IBAction func settingsButtonPressed(sender: Any) {
        router?.routeToSettings()
    }
    
    // MARK: - Fetch Weather
  
    func fetchCurrentWeaher(location: CLLocation) {
        let request = Main.CurrentWeaher.Request(latitude: location.coordinate.latitude, longitude: location.coordinate.longitude)
        interactor?.fetchCurrentWeather(request: request)
    }
    
    func fetchForecast(location: CLLocation) {
        let request = Main.Forecast.Request(latitude: location.coordinate.latitude, longitude: location.coordinate.longitude)
        interactor?.fetchForecast(request: request)
    }
  
    func displayCurrentWeather(viewModel: Main.CurrentWeaher.ViewModel) {
        displayedCurrentWeather = viewModel.displayedWeather
        updateCurrentWeather()
    }
    
    func displayForecast(viewModel: Main.Forecast.ViewModel) {
        displayedForecast = viewModel.displayedForecast
    }
}

// MARK: - ListAdapterDataSource

extension MainViewController: ListAdapterDataSource {
    func objects(for listAdapter: ListAdapter) -> [ListDiffable] {
        return [1] as [ListDiffable]
    }
    
    func listAdapter(_ listAdapter: ListAdapter, sectionControllerFor object: Any) -> ListSectionController {
        return spinnerSectionController()
    }
    
    func emptyView(for listAdapter: ListAdapter) -> UIView? { return nil }

}

// MARK: - LocationServiceDelegate

extension MainViewController: LocationServiceDelegate {
    
    func locationDidUpdate(_ service: LocationService, location: CLLocation) {
        DispatchQueue.once(token: "com.dtsurkan.WeatherDemo") {
            self.fetchCurrentWeaher(location: location)
            self.fetchForecast(location: location)
        }
    }
    
}
