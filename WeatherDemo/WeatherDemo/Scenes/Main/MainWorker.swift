//
//  MainWorker.swift
//  WeatherDemo
//
//  Created by Dima Tsurkan on 9/21/17.
//  Copyright (c) 2017 Dima Tsurkan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Moya

class MainWorker {
  
    func fetchCurrentWeaher(lat: Double, long: Double, completionHandler: @escaping (WeatherModel?, Error?) -> Void) {
        let endpointClosure = { (target: OpenWeatherAPI) -> Endpoint<OpenWeatherAPI> in
            let endpoint = Endpoint<OpenWeatherAPI>(url: target.baseURL.absoluteString + target.path,
                                                    sampleResponseClosure: {.networkResponse(200, target.sampleData)},
                                                    method: target.method,
                                                    task: target.task,
                                                    httpHeaderFields: target.headers)
            return endpoint
        }
        let provider = MoyaProvider<OpenWeatherAPI>(endpointClosure: endpointClosure)
        
        provider.request(.currentWeather(lat: lat, long: long)) { result in
            switch result {
            case let .success(moyaResponse):
                let data = moyaResponse.data
                do {
                    let jsonDecoder = JSONDecoder()
                    let weather = try jsonDecoder.decode(WeatherModel.self, from: data)
                    completionHandler(weather, nil)
                } catch {
                    completionHandler(nil, error)
                }
                
            case let .failure(error):
                completionHandler(nil, error)
            }
        }
    }
    
    func fetchForecast(lat: Double, long: Double, completionHandler: @escaping (ForecastModel?, Error?) -> Void) {
        let endpointClosure = { (target: OpenWeatherAPI) -> Endpoint<OpenWeatherAPI> in
            let endpoint = Endpoint<OpenWeatherAPI>(url: target.baseURL.absoluteString + target.path,
                                                    sampleResponseClosure: {.networkResponse(200, target.sampleData)},
                                                    method: target.method,
                                                    task: target.task,
                                                    httpHeaderFields: target.headers)
            return endpoint
        }
        let provider = MoyaProvider<OpenWeatherAPI>(endpointClosure: endpointClosure)
        
        provider.request(.forecast(lat: lat, long: long)) { result in
            switch result {
            case let .success(moyaResponse):
                let data = moyaResponse.data
                do {
                    let jsonDecoder = JSONDecoder()
                    let json = try JSONSerialization.jsonObject(with: data, options: [])
                    print(json)
                    
                    let forecast = try jsonDecoder.decode(ForecastModel.self, from: data)
                    print(forecast)
//                    completionHandler(weather, nil)
                    
                } catch {
                    completionHandler(nil, error)
                }
                
            case let .failure(error):
                completionHandler(nil, error)
            }
        }
    }
}
