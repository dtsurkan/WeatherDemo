//
//  MainPresenter.swift
//  WeatherDemo
//
//  Created by Dima Tsurkan on 9/21/17.
//  Copyright (c) 2017 Dima Tsurkan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainPresentationLogic {
    func presentCurrentWeather(response: Main.CurrentWeaher.Response)
    func presentForecast(response: Main.Forecast.Response)
    func presentError(response: Main.CurrentWeaher.Response)
}

class MainPresenter: MainPresentationLogic {
    weak var viewController: MainDisplayLogic?
  
    // MARK: - Present Current Weather
  
    func presentCurrentWeather(response: Main.CurrentWeaher.Response) {
        let displayedWeather = Main.CurrentWeaher.ViewModel.DisplayedWeather(id: (response.weather?.id)!, weather: response.weather!)
        let viewModel = Main.CurrentWeaher.ViewModel(displayedWeather: displayedWeather)
        viewController?.displayCurrentWeather(viewModel: viewModel)
    }
    
    func presentForecast(response: Main.Forecast.Response) {
        var displayedForecasts: [Main.Forecast.ViewModel.DisplayedForecast] = []
        if let forecast = response.forecast {
            let list = forecast.list
            
            let datesArray = list.flatMap { $0.dayName as? String}
            var dict = [String: [ForecastItem]]()
            datesArray.forEach {
                let dateKey = $0
                let filteredArray = list.filter { $0.dayName == dateKey }
                dict[$0] = filteredArray
            }
            
            for item in dict {
                let displayedForecast = Main.Forecast.ViewModel.DisplayedForecast(dayName: item.key, dayNumber: item.key, forecast: item.value)
                displayedForecasts.append(displayedForecast)
            }
            
            let sortedForecasts = displayedForecasts.sorted(by: { $0.dayNumber < $1.dayNumber })
            let viewModel = Main.Forecast.ViewModel(displayedForecast: sortedForecasts)
            viewController?.displayForecast(viewModel: viewModel)
        }

    }
    
    
    
    func presentError(response: Main.CurrentWeaher.Response) {
        debugPrint(response.errorDescription!)
    }
}
